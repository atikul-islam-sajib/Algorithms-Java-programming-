package Binary_SearchTree_FinalPractise;

import java.util.EventListener;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import java.util.concurrent.CountDownLatch;

class Node
{
    int data;
    Node left;
    Node right;
}
class BST
{
     public Node createNewNode(int k)
     {
         Node a = new Node();
         a.data = k;
         a.left = null;
         a.right = null;
         return a;
     }
     public Node insert(Node node, int val)
     {
         if (node == null)
         {
             return createNewNode(val);
         }
         if (val <node.data)
         {
             node.left= insert(node.left, val);
         }else if (val > node.data)
         {
             node.right = insert(node.right,val);
         }
         return node;
     }
     public void inorder_traversal(Node node)
     {
         if (node == null)
         {
             return;
         }
         inorder_traversal(node.left);
         System.out.print(node.data+" ");
         inorder_traversal(node.right);
     }
     public void preorder_traversal(Node node)
     {
         if (node== null)
         {
             return;
         }
         System.out.print(node.data+" ");
         preorder_traversal(node.left);
         preorder_traversal(node.right);
     }
     public void postorder_traversal(Node node)
     {
         if (node==null) return;
         postorder_traversal(node.left);
         postorder_traversal(node.right);
         System.out.print(node.data+" ");
     }
     public boolean data_exists_orNot(Node node, int value)
     {
         boolean FoundOrNotFound = false;
         while (node !=null)
         {
             if (node.data > value)
             {
                 node = node.left;
             }
             else if(node.data<value)
             {
                 node = node.right;
             }
             else
             {
                 FoundOrNotFound = true;
                 break;
             }
         }
         return FoundOrNotFound;
     }
    boolean FoundOrNot = false;
     public boolean dataExistsOrNot(Node node,int value)
     {
         if (node == null)
         {
             return false;
         }
         if (node.data == value)
         {
             FoundOrNot = true;
         }
         dataExistsOrNot(node.left,value);
         dataExistsOrNot(node.right,value);
         return FoundOrNot;
     }
     public int parentFind(Node node, int value)
     {
         Node parentFind = null;
         int storeParent = 0;
         while (node != null)
         {
             if (node.data > value)
             {
                 parentFind = node;
                 node = node.left;
             }
             else if (node.data<value)
             {
                 parentFind = node;
                 node = node.right;
             }
             else
             {
                 storeParent = parentFind.data;
                 break;
             }
         }
         return storeParent;
     }
    Node ParentData = null;
    int StoreParentData = 0;
     public int ParentDataFind(Node node, int value)
     {
         if (node == null)
         {
             return 0;
         }
         if (node.data>value)
         {
             ParentData = node;
             ParentDataFind(node.left,value);
         }
         else if(node.data<value)
         {
             ParentData = node;
             ParentDataFind(node.right,value);
         }
         else if(node.data == value)
         {
             StoreParentData = ParentData.data;
         }
         return StoreParentData;
     }
     public int findSiblings(Node node, int value)
     {
         Node ParentFind = null;
         int SiblingsFind = 0;
         int leftSiblings = 0;
         int rightSiblings =0;
         while (node != null)
         {
             if (node.data>value)
             {
                 ParentFind = node;
                 node = node.left;
                 leftSiblings = 1;
                 rightSiblings = 0;
             }
             else if(node.data<value)
             {
                 ParentFind = node;
                 node = node.right;
                 rightSiblings = 1;
                 leftSiblings = 0;
             }
             else
             {
                 if (rightSiblings == 1)
                 {
                     if (ParentFind.left !=null) {
                         SiblingsFind = ParentFind.left.data;
                         break;
                     }
                     else
                     {
                         SiblingsFind = -1;
                         break;
                     }
                 }
                 if (leftSiblings == 1)
                 {
                     if (ParentFind.right !=null) {
                         SiblingsFind = ParentFind.right.data;
                         break;

                     }
                     else
                     {
                         SiblingsFind = -1;
                         break;
                     }
                 }


             }
         }
         return SiblingsFind;
     }
     int Left = 0;
     int Right = 0;
     Node ParentNode = null;
     int siblingsFind = 0;
     public int siblingsFind(Node node,int value)
     {
         if (node == null)
         {
             return 0;
         }
         if (node.data > value)
         {
             ParentNode = node;
             Left = 1;
             Right =0;
             siblingsFind(node.left,value);
         }
         if (node.data < value)
         {
             ParentNode = node;
             Left =0;
             Right =1;
             siblingsFind(node.right,value);
         }
         if (node.data == value)
         {
             if (Left ==1)
             {
                 if (ParentNode.right!=null)
                 {
                     siblingsFind = ParentNode.right.data;
                 }
                 else
                 {
                     siblingsFind = -1;
                 }
             }
             if (Right == 1)
             {
                 if (ParentNode.left!=null)
                 {
                     siblingsFind = ParentNode.left.data;
                 }
                 else
                 {
                     siblingsFind = -1;
                 }
             }
         }
         return siblingsFind;
     }
     int leftChild = 0;
     int rightChild = 0;
     public void partcularNodeChild(Node node, int value)
     {
         if (node == null)
         {
             return;
         }
         if (node.data>value)
         {
             partcularNodeChild(node.left,value);
         }
         if (node.data < value)
         {
             partcularNodeChild(node.right,value);
         }
         if (node.data == value)
         {
             if (node.left !=null)
             {
                 leftChild = node.left.data;
                 System.out.println("Left Child: "+leftChild);
             }
             if (node.left ==null)
             {
                 System.out.println("Left Child not available: ");
             }

             if (node.right !=null)
             {
                 rightChild = node.right.data;
                 System.out.println("Right Child: "+rightChild);
             }
             if (node.right ==null)
             {
                 System.out.println("Right Child not available: ");
             }

         }
     }
     public void printLeafNode(Node node)
     {
         if (node == null)
         {
             return;
         }
         printLeafNode(node.left);
         printLeafNode(node.right);
         if (node.left == null && node.right==null)
         {
             System.out.print(node.data+" ");
         }
     }
     int addition =0;
     public int sumLeafNodeValues(Node node)
     {
         if (node == null)
         {
             return 0;
         }
        int left = sumLeafNodeValues(node.left);
        int right = sumLeafNodeValues(node.right);
        if (node.left==null && node.right==null)
        {
            addition = addition + node.data;
        }
        return addition;

     }
     int CountLeafNodes =0;
     public int CountAllLeafNodes(Node node)
     {
         if (node == null)
         {
             return 0;
         }
         CountAllLeafNodes(node.left);
         CountAllLeafNodes(node.right);
         if (node.left == null && node.right== null)
         {
             CountLeafNodes = CountLeafNodes + 1;
         }
         return CountLeafNodes;
     }
     public int CountAllNodes(Node node)
     {
         if (node == null)
         {
             return 0;
         }
         return 1 + CountAllNodes(node.left) + CountAllNodes(node.right);
     }
     public int CountLeftSubtreeNodes(Node node)
     {
         if (node==null)
         {
             return 0;
         }
         return 1 + CountAllLeafNodes(node.left) + CountAllLeafNodes(node.right);
     }
     public int printCountLeftSubTreeNodes(Node node)
     {
         int result = CountLeftSubtreeNodes(node.left);
         return result;
     }
     public int FindMaxValue(Node node)
     {
         Node MaxFind =null;
         if (node == null)
         {
             return 0;
         }
         while (node != null)
         {   MaxFind =node;
             node = node.right;
         }
         return MaxFind.data;
     }
     public int FindMinValue(Node node)
     {
         Node minFind = null;
         if (node == null)
         {
             return 0;
         }
         while (node!=null)
         {
             minFind = node;
             node = node.left;
         }
         return minFind.data;
     }
     public int sumAllNodeValues(Node node)
     {
         if (node == null)
         {
             return 0;
         }
         return node.data + sumAllNodeValues(node.left) + sumAllNodeValues(node.right);
     }
     int sum = 0;
     public int sumAllNodesValue(Node node)
     {
         if (node == null)
         {
             return 0;
         }
         sum = sum + node.data;
         sumAllNodesValue(node.left);
         sumAllNodesValue(node.right);
         return sum;
     }
     public void print_LeftNode(Node node)
     {
         if (node == null)
         {
             return;
         }
         System.out.print(node.data+" ");
         print_LeftNode(node.left);
     }
     public void print_RightNode(Node node)
     {
         if (node == null) return;
         System.out.print(node.data+" ");
         print_RightNode(node.right);
     }
     public int getSumOfRightNodesOnly(Node node)
     {
         if (node == null)
         {
             return 0;
         }
         return node.data + getSumOfRightNodesOnly(node.right);
     }
     int countDistance = 0;
     int getDistance =0;
     int result =0;
     public int findDistance(Node node,int value)
     {
         if (node == null)
         {
             return 0;
         }
         if (node.data<value)
         {
             countDistance = countDistance + 1;
             findDistance(node.right,value);
         }
         if (node.data>value)
         {
             countDistance = countDistance + 1;
             findDistance(node.left,value);
         }
         if (node.data == value)
         {
             getDistance = countDistance;
         }
         return getDistance;
     }
     public int printPartcularDataDistance(Node node,int value)
     {
         if (node.data<value)
         {
             result = findDistance(node.right,value);
         }
         else if(node.data>value)
         {
             result = findDistance(node.left,value);
         }
         return result + 1;
     }
     int height =0;
     int getLeft;
     int getRight;
     public int heightOfBinaryTree(Node node)
     {
         if (node == null)
         {
             return 0;
         }
         getLeft = heightOfBinaryTree(node.left);
         getLeft = heightOfBinaryTree(node.right);
         if (getLeft>getRight)
         {
             height = 1 + getLeft;
         }
         else
         {
             height = 1 + getRight;
         }
         return height;
     }
     public int sizeOfBinaryTree(Node node)
     {
         if (node == null)
         {
             return 0;
         }
         return 1 + sizeOfBinaryTree(node.left) + sizeOfBinaryTree(node.right);
     }
     int sizeOfBinaryTree =0;
     public int sizeOfTree(Node node)
     {
         if (node == null)
         {
             return 0;
         }
         sizeOfBinaryTree = sizeOfBinaryTree + 1;
         sizeOfTree(node.left);
         sizeOfTree(node.right);
         return sizeOfBinaryTree;
     }
    int getHeigh = 0;
     public int calculateHeight(Node node)
     {
         if (node == null)
         {
             return 0;
         }
         int left = calculateHeight(node.left);
         int right = calculateHeight(node.right);
         if (left>right)
         {
             getHeigh = 1 + left;
         }
         else
         {
             getHeigh = 1 + right;
         }
         return getHeigh;
     }
     public int calculateDiameter(Node node)
     {
         if (node == null)
         {
             return 0;
         }
         int leftHeight = calculateHeight(node.left);
         int rightHeight = calculateHeight(node.right);
         int leftDiameter = calculateDiameter(node.left);
         int rightDiameter = calculateDiameter(node.right);
         int getDiameter = Math.max((leftHeight+rightHeight+1),Math.max(leftDiameter,rightDiameter));
         return getDiameter;
     }
     public int calculateSubTreeNode(Node node)
     {
         if (node == null)
         {
             return 0;
         }
//         return 1 + calculateSubTreeNode(node.left) + calculateSubTreeNode(node.right);
         int left = calculateSubTreeNode(node.left);
         int right = calculateSubTreeNode(node.right);
         return 1 + left + right;
     }
     public int printLargestSubTree(Node node)
     {
         int leftSubTree = calculateSubTreeNode(node.left);
         int rightSubTree = calculateSubTreeNode(node.right);
         int result = Math.max(leftSubTree,rightSubTree);
         return result;
     }
     public void printEvenNodes(Node node)
     {
         if (node ==null)
         {
             return;
         }
         if (node.data % 2==0)
         {
             System.out.print(node.data+" ");
         }
         printEvenNodes(node.left);
         printEvenNodes(node.right);
     }
     public void printOddNodes(Node node)
     {
         if (node == null)
         {
             return;
         }
         if (node.data%2 !=0)
         {
             System.out.print(node.data+" ");
         }
         printOddNodes(node.left);
         printOddNodes(node.right);
     }
     Stack<Integer> stack = new Stack<>();
     public void printRootToLeafNode(Node node)
     {
         if (node==null)
         {
             return;
         }
         stack.push(node.data);
         if (node.left == null && node.right == null) {
             if (!stack.isEmpty()) {
                 System.out.println(stack);
             }
         }
         printRootToLeafNode(node.left);
         printRootToLeafNode(node.right);
         if (!stack.isEmpty())
         {
             stack.pop();
         }
     }
     Stack<Integer> stackPrintPath = new Stack<>();
     int sumPath = 0;
     public void printPathGivenSum(Node node, int value)
     {
         if (node == null)
         {
             return;
         }
         stackPrintPath.push(node.data);
         sumPath = sumPath + node.data;
         if (sumPath == value)
         {
             System.out.println(stackPrintPath);
         }
         printPathGivenSum(node.left,value);
         printPathGivenSum(node.right,value);
         sumPath = sumPath - node.data;
         if (!stackPrintPath.isEmpty())
         {
             stackPrintPath.pop();
         }

     }
     public void printLowestCommonAncestor(Node node, int value1, int value2)
     {
         if (node.data>Math.max(value1,value2))
         {
             printLowestCommonAncestor(node.left,value1,value2);
         }
         else if(node.data<Math.min(value1,value2))
         {
             printLowestCommonAncestor(node.right,value1,value2);
         }
         else
         {
             System.out.println(node.data);
         }
     }
     Stack<Integer> stackAncestor = new Stack<>();
     public void printAncestor(Node node,int value)
     {
         if (node == null)
         {
             return;
         }
         if (node.data>value)
         {
             stackAncestor.push(node.data);
             printAncestor(node.left,value);
         }
         else if (node.data<value)
         {
             stackAncestor.push(node.data);
             printAncestor(node.right,value);
         }
         else if (node.data == value)
         {
             if (!stackAncestor.isEmpty())
             {
                 while (!stackAncestor.isEmpty())
                 {
                     System.out.print(stackAncestor.peek()+" ");
                     stackAncestor.pop();
                 }
             }
         }
     }
     Queue<Node> queue = new LinkedList<>();
     public void BFSTraversal(Node node)
     {
         queue.add(node);
         while (!queue.isEmpty())
         {
             node =  queue.remove();
             System.out.print(node.data+" ");
             if (node.left !=null)
             {
                 queue.add(node.left);
             }
             if (node.right !=null)
             {
                 queue.add(node.right);
             }
         }
     }
     public void printNodeFromParticularDistance(Node node, int k)
     {
         if (node == null)
         {
             return;
         }
         if (k==0)
         {
             System.out.print(node.data+" ");
         }
         printNodeFromParticularDistance(node.left,k-1);
         printNodeFromParticularDistance(node.right,k-1);
     }
     public void printGivenRange(Node node, int range1, int range2)
     {
         if (node == null) return;
         if (node.data >=range1 && node.data<=range2)
         {
             System.out.print(node.data+" ");
         }
         printGivenRange(node.left,range1,range2);
         printGivenRange(node.right,range1,range2);
     }
    Stack<Integer> stackClosestElement = new Stack<>();
    int ClosestElement = 0;
    int second =0;
     public int printClosestElement(Node node, int value)
     {
         if (node==null) return 0;
         if (node.data<=value)
         {
             stackClosestElement.push(node.data);
             printClosestElement(node.left,value);
             printClosestElement(node.right,value);
         }
         else
         {
             printClosestElement(node.left,value);
             printClosestElement(node.right,value);
         }

         while (!stackClosestElement.isEmpty()) {
             if (!stackClosestElement.isEmpty()) {
                 int firstElement = stackClosestElement.pop();
                 ClosestElement = Math.max(firstElement, second);
                 second = ClosestElement;
             }
         }
         return ClosestElement;
     }
     int countNodesGivenRange = 0;
     public int CountNodesInGivenRange(Node node, int range1,int range2)
     {
         if (node == null) return 0;
         if (node.data>=range1 && node.data<=range2)
         {
             countNodesGivenRange = countNodesGivenRange + 1;
         }
         CountNodesInGivenRange(node.left,range1,range2);
         CountNodesInGivenRange(node.right,range1,range2);
         return countNodesGivenRange;

     }
     int findCost = 0;
     int getCost =0;
     public int findCostOfRootToParicularData(Node node, int value)
     {
         if (node == null) return 0;
         if (node.data>value)
         {
             findCost = findCost + 1;
             findCostOfRootToParicularData(node.left,value);
         }
         else if(node.data<value)
         {
             findCost = findCost + 1;
             findCostOfRootToParicularData(node.right,value);
         }
         else if(node.data==value)
         {
             getCost = findCost;
         }
         return getCost;
     }
    int FromRightSubTree=0;
    public int InorderSuccessorRightSubtreePresent(Node node)
     {
         if (node == null)
         {
             return 0;
         }
         int minValue = Math.min(node.data,node.data);
         InorderSuccessorRightSubtreePresent(node.left);
         return minValue;
     }
     Stack<Integer> stackInorder = new Stack<>();
     int searchData = 0;
     public int printInorderSuccessor(Node node, int value)
     {
         if (node == null)
         {
             return 0;
         }
         if (node.data>value)
         {   stackInorder.push(node.data);
             printInorderSuccessor(node.left,value);
         }
         else if(node.data<value)
         {   stackInorder.push(node.data);
             printInorderSuccessor(node.right,value);
         }
         else if(node.data == value)
         {    searchData = node.data;
             if (node.right!=null)
             {
                 FromRightSubTree = InorderSuccessorRightSubtreePresent(node.right);
             }
             else if(node.right == null)
             {
                 if (!stackInorder.isEmpty())
                 {
                     while (!stackInorder.isEmpty())
                     {
                         int peekData = stackInorder.peek();
                         if (searchData<=peekData)
                         {
                             FromRightSubTree = peekData;
                             break;
                         }
                         else
                         {
                             stackInorder.pop();
                         }
                     }
                 }
             }
         }
         return FromRightSubTree;
     }
    int FromLeftSubTree =0;
    Stack<Integer> stackInorderPredecessor = new Stack<>();
     public int InorderPredecessor(Node node, int value)
     {
         if (node == null)
         {
             return 0;
         }
         if (node.data>value)
         {   stackInorderPredecessor.push(node.data);
             InorderPredecessor(node.left,value);
         }
         else if(node.data<value)
         {   stackInorderPredecessor.push(node.data);
             InorderPredecessor(node.right,value);
         }
         else if(node.data == value)
         {    searchData = node.data;
             if (node.left!=null)
             {
                 FromLeftSubTree = InorderPredecessorLeftSubtreePresent(node.left);
             }
             else if(node.left == null)
             {
                 if (!stackInorderPredecessor.isEmpty())
                 {
                     while (!stackInorderPredecessor.isEmpty())
                     {
                         int peekData = stackInorderPredecessor.peek();
                         if (searchData>=peekData)
                         {
                             FromLeftSubTree = peekData;
                             break;
                         }
                         else
                         {
                             stackInorderPredecessor.pop();
                         }
                     }
                 }
             }
         }
         return FromLeftSubTree;
     }
    public int InorderPredecessorLeftSubtreePresent(Node node)
    {
        if (node == null)
        {
            return 0;
        }
        int minValue = Math.max(node.data,node.data);
        InorderPredecessorLeftSubtreePresent(node.right);
        return minValue;
    }
    int getSum =0;
    public void checkPairSum(Node nodeLeft, Node nodeRight,int value)
    {
        if (nodeLeft == null )
            return;
        if (nodeRight == null)
            return;
        getSum = nodeLeft.data + nodeRight.data;
        if (getSum == value)
        {
            System.out.print(nodeLeft.data+" "+nodeRight.data);
        }
        else
        {
            checkPairSum(nodeLeft.left,nodeRight.left,value);
            checkPairSum(nodeLeft.left,nodeRight.right,value);
            checkPairSum(nodeLeft.right,nodeRight.left,value);
            checkPairSum(nodeLeft.right,nodeRight.right,value);

        }

    }
    public void printPairSum(Node node,int value)
    {
        if (node == null)
        {
            return;
        }
        checkPairSum(node.left,node.right,value);
    }
    public void printLeftBoundary(Node node)
    {
        if (node == null) return;
        if (node.left == null && node.right == null) {
        }
        else
        {
            if (node.left !=null) {
                System.out.print(node.data + " ");
                printLeftBoundary(node.left);
            }
            else if(node.right !=null)
            {
                System.out.print(node.data + " ");
                printLeftBoundary(node.right);
            }
        }
    }
    public void printRightBoundary(Node node)
    {
        if (node == null) return;
        if (node.left == null && node.right == null){}
        else
        {
            if (node.left !=null) {
                System.out.print(node.data + " ");
                printLeftBoundary(node.left);
            }
            else if(node.right !=null)
            {
                System.out.print(node.data + " ");
                printLeftBoundary(node.right);
            }
        }
    }
    public void printLeafBoundary(Node node)
    {
        if (node == null) return;
        if (node.left == null && node.right==null){
            System.out.print(node.data+" ");
        }
        printLeafBoundary(node.left);
        printLeafBoundary(node.right);
    }
    public void printBoundaryTraversal(Node node)
    {
        printLeftBoundary(node);
        printRightBoundary(node.right);
        printLeafBoundary(node);
    }



}
public class BSTApp {
    public static void main(String[] args) {

        BST a = new BST();
        Node root = null;
        /*root = a.insert(root,10);
        root = a.insert(root,8);
        root = a.insert(root,14);
        root = a.insert(root,1);
        root = a.insert(root,0);
        root = a.insert(root,9);
        root = a.insert(root,13);
        root = a.insert(root,17);*/


        root = a.insert(root,15);
        root = a.insert(root,10);
        root = a.insert(root,20);
        root = a.insert(root,8);
        root = a.insert(root,12);
        root = a.insert(root,16);
        root = a.insert(root,25);
        root = a.insert(root,9);
        /*root = a.insert(root,10);
        root = a.insert(root,5);
        root = a.insert(root,50);
        root = a.insert(root,1);
        root = a.insert(root,40);
        root = a.insert(root,100);*/
//        root = a.insert(root,5);
//        root = a.insert(root,7);
//        root = a.insert(root,20);

//        root = a.insert(root,17);
//        root = a.insert(root,39);
//        root = a.insert(root,113);
//        root = a.insert(root,15);
        /* inorder traversal
        a.inorder_traversal(root); */

        /* preorder traversal
        a.preorder_traversal(root); */

        /* postorder traversal
        a.postorder_traversal(root); */
//        System.out.println("Data Found: "+a.data_exists_orNot(root,100));
//        System.out.println("Data Found: "+a.dataExistsOrNot(root,100));
//        System.out.println("Parent = "+a.parentFind(root,14));
//        System.out.println("Parent = "+a.ParentDataFind(root,14));
//        System.out.println("Siblings = "+a.findSiblings(root,1));
//        System.out.println("Siblings = "+a.siblingsFind(root,1));
//        a.partcularNodeChild(root,14);
//        a.printLeafNode(root);
//        System.out.println("Sum of Leaf Nodes = "+a.sumLeafNodeValues(root));
//        System.out.println("Count Leaf Nodes = "+a.CountAllLeafNodes(root));
//        System.out.println(a.CountAllNodes(root));
//        System.out.println(a.printCountLeftSubTreeNodes(root));
//        System.out.println(a.FindMaxValue(root));
//        System.out.println(a.FindMinValue(root));
//        System.out.println("Sum = "+a.sumAllNodeValues(root));
//        System.out.println("Sum = "+a.sumAllNodesValue(root));
//        a.print_LeftNode(root);
//        a.print_RightNode(root);
//        System.out.println("Sum of Right Nodes : "+a.getSumOfRightNodesOnly(root));
//        System.out.println(a.printPartcularDataDistance(root,113));
//        System.out.println("Height of binary tree = "+a.heightOfBinaryTree(root));
//        System.out.println("Size of binary tree = "+a.sizeOfBinaryTree(root));
//        System.out.println("Size of binary tree = "+a.sizeOfTree(root));
//        System.out.println("Diameter of binary tree = "+a.calculateDiameter(root));
//        System.out.println("Largest subtree nodes count = "+a.printLargestSubTree(root));
//        a.printEvenNodes(root);
//        a.printOddNodes(root);
//        a.printRootToLeafNode(root);
//        a.printPathGivenSum(root,27);
//        a.printLowestCommonAncestor(root,0,9);
//        a.printAncestor(root,17);
//        a.BFSTraversal(root);
//        a.printNodeFromParticularDistance(root,1);
//        a.printGivenRange(root,0,13);
        //System.out.println(a.printClosestElement(root,12));
//        System.out.println("Count Nodes = "+a.CountNodesInGivenRange(root,5,45));
//        System.out.println(a.findCostOfRootToParicularData(root,17));
//        System.out.println("Successor: "+a.printInorderSuccessor(root,14));
//        System.out.println("Predecessor : "+a.InorderPredecessor(root,14));
//        a.printPairSum(root,28);
        a.printBoundaryTraversal(root);

    }
}
