int getLeftSubTree = 0;
    public int getLeftSubTree(Node node)
    {
        if (node == null)
        {
            return 0;
        }
        int left = getLeftSubTree(node.left);
        int right = getLeftSubTree(node.right);
        int sum = 1 + left + right;
        return sum;

    }
    int leftSubTree = 0;
    int rightSubTree = 0;
    public int find_largest_BST_subtree(Node node)
    {
        if (node == null)
        {
            return 0;
        }
        leftSubTree = getLeftSubTree(node.left);
        rightSubTree = getLeftSubTree(node.right);
        if (leftSubTree > rightSubTree)
        {
            return leftSubTree;
        }
        else {
            return rightSubTree;
        }

    }

System.out.println("Largest subtree = "+a.find_largest_BST_subtree(root)+1);