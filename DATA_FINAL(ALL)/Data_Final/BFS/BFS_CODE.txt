package BFS;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Practise_Create {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        Queue<Integer> queue = new LinkedList<>();
        int[][] graph = new int[10][10];
        System.out.println("Enter number of vertex");
        int vertex = input.nextInt();
        System.out.println("Enter number of edges");
        int edges = input.nextInt();
        int[] visited = new int[vertex];
        int[] distance = new int[10];
        int[] parent = new int[10];
        for (int i=0;i<vertex;i++)
        {
            visited[i] = 0;
        }
        for (int i=0;i<vertex;i++)
        {
            for (int j=0;j<vertex;j++)
            {
                graph[i][j] = 0;
            }
        }
        for (int i=0;i<edges;i++)
        {
            int n1 = input.nextInt();
            int n2 = input.nextInt();
            int weight = input.nextInt();
            graph[n1][n2] = weight;
            graph[n2][n1] = weight;
        }
        for (int i=0;i<vertex;i++)
        {
            for (int j=0;j<vertex;j++)
            {
                System.out.print(graph[i][j]+" ");
            }
            System.out.println();
        }
        for (int i=0;i<vertex;i++)
        {
            parent[i] = -1;
            distance[i] = 0;
        }
        int q = 0;
        queue.add(5);
        visited[5] = 1;
        int goal_node = 3;
        while (!queue.isEmpty())
        {
            q = queue.remove();
            System.out.println(q+" ");
            for (int i=0;i<vertex;i++)
            {
                if ((graph[q][i] != 0) && (visited[i]==0))
                {
                    parent[i] = q;
                    distance[i] = distance[q] + graph[q][i];
                    queue.add(i);
                    visited[i] = 1;
                }
            }
        }
        System.out.println(distance[0]);

    }
}
