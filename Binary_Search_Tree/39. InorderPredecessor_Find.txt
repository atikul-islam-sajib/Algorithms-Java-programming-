int FromLeftSubTree =0;
    Stack<Integer> stackInorderPredecessor = new Stack<>();
     public int InorderPredecessor(Node node, int value)
     {
         if (node == null)
         {
             return 0;
         }
         if (node.data>value)
         {   stackInorderPredecessor.push(node.data);
             InorderPredecessor(node.left,value);
         }
         else if(node.data<value)
         {   stackInorderPredecessor.push(node.data);
             InorderPredecessor(node.right,value);
         }
         else if(node.data == value)
         {    searchData = node.data;
             if (node.left!=null)
             {
                 FromLeftSubTree = InorderPredecessorLeftSubtreePresent(node.left);
             }
             else if(node.left == null)
             {
                 if (!stackInorderPredecessor.isEmpty())
                 {
                     while (!stackInorderPredecessor.isEmpty())
                     {
                         int peekData = stackInorderPredecessor.peek();
                         if (searchData>=peekData)
                         {
                             FromLeftSubTree = peekData;
                             break;
                         }
                         else
                         {
                             stackInorderPredecessor.pop();
                         }
                     }
                 }
             }
         }
         return FromLeftSubTree;
     }
    public int InorderPredecessorLeftSubtreePresent(Node node)
    {
        if (node == null)
        {
            return 0;
        }
        int minValue = Math.max(node.data,node.data);
        InorderPredecessorLeftSubtreePresent(node.right);
        return minValue;
    }