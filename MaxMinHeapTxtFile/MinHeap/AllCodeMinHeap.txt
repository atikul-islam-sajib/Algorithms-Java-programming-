package Heap_Data_Structure_Final;
//10 5 1 0 3
class MinHeap
{
    int[] BT;
    int heap_size;

    public MinHeap()
    {
        BT = new int[5];
        heap_size = 0;
    }
    public void insert(int value)
    {
        try {
            BT[heap_size] = value;
            heap_size = heap_size + 1;
            heapify_bottom_up(heap_size-1);
        }catch (ArrayIndexOutOfBoundsException e)
        {
            System.out.println("Array index out of bounds: ");
        }

    }
    public void heapify_bottom_up(int index)
    {   int temp = 0;
        while (true)
        {
            if (BT[index]>=BT[(index-1)/2]) break;
            else
                temp = BT[index];
                BT[index] = BT[(index-1)/2];
                BT[(index-1)/2] = temp;
                index = (index-1)/2;


        }
    }
    public void print()
    {
        for (int i=0;i<heap_size;i++)
        {
            System.out.print(BT[i]+" ");
        }
        System.out.println();
    }
    public void search_data(int search_data)
    {
        for (int i=0; i<=heap_size;i++)
        {
            try {
                if (BT[i]==search_data)
                {
                    System.out.print("Found: "+search_data);
                    break;
                }
            }catch (Exception e)
            {
                System.out.println("Not Found: ");
            }
        }
    }
    public void deleteRoot()
    {
        BT[0] = BT[heap_size-1];
        heap_size = heap_size -1;
        heapify_top_down(0);

    }
    public void heapify_top_down(int parent)
    {
        int left_child,right_child,max_index=0,temp=0;
        left_child =(2*parent) + 1;
        right_child = (2*parent) + 2;
        max_index = parent;
        if ((left_child<heap_size) &&(BT[left_child]<BT[parent]))
        {
            max_index = left_child;
        }
        if ((right_child<heap_size) &&(BT[right_child]<BT[max_index]))
        {
            max_index = right_child;
        }
        if (max_index!=parent)
        {
            temp = BT[parent];
            BT[parent] = BT[max_index];
            BT[max_index] = temp;
            heapify_top_down(max_index);
        }


    }
    int[] array = new int[15];
    int index =0;
    public void print_descendingOrder()
    {
        for (int i=0;i<heap_size;i++){
            array[index] = BT[i];
            index = index + 1;
        }
        for (int i=0;i<index;i++)
        {
            ConvertMaxHeap(i);
        }
        printDescending();
    }
    public void ConvertMaxHeap(int index)
    {   int temp = 0;
        while (true)
        {
            if (array[index]<=array[(index-1)/2]) break;
            else
                temp = array[index];
            array[index] = array[(index-1)/2];
            array[(index-1)/2] = temp;
            index = (index-1)/2;


        }
    }
    public void printDescending()
    {
        while (index !=0)
        {
            System.out.print(array[0]+" ");
            array[0] = array[index-1];
            index = index -1;
            Max(0);
           printDescending();

        }
    }
    public void Max(int parent)
    {
        int left_child,right_child,max_index=0,temp=0;
        left_child =(2*parent) + 1;
        right_child = (2*parent) + 2;
        max_index = parent;
        if ((left_child<index) &&(array[left_child]>array[parent]))
        {
            max_index = left_child;
        }
        if ((right_child<index) &&(array[right_child]>array[max_index]))
        {
            max_index = right_child;
        }
        if (max_index!=parent)
        {
            temp = array[parent];
            array[parent] = array[max_index];
            array[max_index] = temp;
            Max(max_index);
        }


    }
    public void deleteParticularData(int deleteData)
    {
        for (int i=0;i<=heap_size;i++)
        {   try {
            if (BT[i] == deleteData) {
                BT[i] = BT[heap_size - 1];
                heap_size = heap_size - 1;
                heapify_bottom_up(i);
                break;
            }
           }catch (Exception e)
            {
                System.out.println("Not Found: ");
            }
        }
    }
    public void updateData(int previous_data, int update_value)
    {
        for (int i=0;i<=heap_size;i++)
        {
            try {
                if (BT[i]==previous_data)
                {
                    BT[i] = update_value;
                    heapify_bottom_up(i);
                    break;
                }
            }catch (Exception e)
            {
                System.out.println("Data not found: ");
            }
        }
    }
    public void print_ascendingOrder()
    {
        while (heap_size !=0)
        {
            System.out.print(BT[0]+" ");
            BT[0] = BT[heap_size-1];
            heap_size = heap_size -1;
        }
            heapify_top_down(0);
            print_ascendingOrder();
    }
}
public class MinHeapImplementation {
    public static void main(String[] args) {
       MinHeap heap = new MinHeap();
       heap.insert(3);
       heap.insert(5);
       heap.insert(10);
       heap.insert(7);
       heap.insert(33);
//       heap.print();
//       heap.search_data(31);
//        heap.deleteRoot();
//        heap.print();
//        heap.deleteParticularData(100);
//        heap.print();
//        heap.updateData(5,-1);
//        heap.print();
//        heap.print_ascendingOrder();
        heap.print_descendingOrder();
    }
}
